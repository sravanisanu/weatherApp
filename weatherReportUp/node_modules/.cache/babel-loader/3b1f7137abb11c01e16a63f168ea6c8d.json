{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shrav\\\\Downloads\\\\weatherReportUp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetWeather),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(AppLoading);\n\nimport { takeEvery, call, put, cancel, all } from \"redux-saga/effects\";\nimport API from \"../api\";\nimport * as actions from \"../actions\";\n/*\r\n  1. The weather service requires us to make a search by lat/lng to find its\r\n  weather ID.\r\n  2. We then use that weather ID to get the weather.\r\n\r\n  This process is pretty well defined here with a saga.\r\n\r\n  call invokes a method\r\n  put dispatches an action\r\n  takeEvery watches actions and executes a function\r\n\r\n  Also -- the `*` in function is important; turns it into a \"generator\"\r\n\r\n*/\n\nfunction watchGetWeather(action) {\n  var _ref, error, data, metrics;\n\n  return _regeneratorRuntime.wrap(function watchGetWeather$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(API.getWeatherData);\n\n        case 2:\n          _ref = _context.sent;\n          error = _ref.error;\n          data = _ref.data;\n\n          if (!error) {\n            _context.next = 12;\n            break;\n          }\n\n          console.log({\n            error: error\n          });\n          _context.next = 9;\n          return put({\n            type: actions.API_ERROR,\n            code: error.code\n          });\n\n        case 9:\n          _context.next = 11;\n          return cancel();\n\n        case 11:\n          return _context.abrupt(\"return\");\n\n        case 12:\n          metrics = data || false;\n\n          if (metrics) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 16;\n          return put({\n            type: actions.API_ERROR\n          });\n\n        case 16:\n          _context.next = 18;\n          return cancel();\n\n        case 18:\n          return _context.abrupt(\"return\");\n\n        case 19:\n          _context.next = 21;\n          return put({\n            type: actions.GET_METRIC_DATA,\n            metrics: metrics\n          });\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction AppLoading() {\n  return _regeneratorRuntime.wrap(function AppLoading$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeEvery(actions.GET_WEATHER, watchGetWeather)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default [AppLoading];","map":{"version":3,"sources":["C:\\Users\\shrav\\Downloads\\weatherReportUp\\src\\store\\sagas\\Weather.js"],"names":["watchGetWeather","AppLoading","takeEvery","call","put","cancel","all","API","actions","action","getWeatherData","error","data","console","log","type","API_ERROR","code","metrics","GET_METRIC_DATA","GET_WEATHER"],"mappings":";;;;yBAmBUA,e;;;yBAoBAC,U;;AAvCV,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AAEA;;;;;;;;;;;;;;;AAeA,SAAUR,eAAV,CAA0BS,MAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC0B,iBAAMN,IAAI,CAChCI,GAAG,CAACG,cAD4B,CAAV;;AAD1B;AAAA;AACUC,UAAAA,KADV,QACUA,KADV;AACiBC,UAAAA,IADjB,QACiBA,IADjB;;AAAA,eAIMD,KAJN;AAAA;AAAA;AAAA;;AAKIE,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,YAAAA,KAAK,EAALA;AAAF,WAAZ;AALJ;AAMI,iBAAMP,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP,OAAO,CAACQ,SAAhB;AAA2BC,YAAAA,IAAI,EAAEN,KAAK,CAACM;AAAvC,WAAD,CAAT;;AANJ;AAAA;AAOI,iBAAMZ,MAAM,EAAZ;;AAPJ;AAAA;;AAAA;AAUQa,UAAAA,OAVR,GAUkBN,IAAI,IAAI,KAV1B;;AAAA,cAWOM,OAXP;AAAA;AAAA;AAAA;;AAAA;AAYI,iBAAMd,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP,OAAO,CAACQ;AAAhB,WAAD,CAAT;;AAZJ;AAAA;AAaI,iBAAMX,MAAM,EAAZ;;AAbJ;AAAA;;AAAA;AAAA;AAgBE,iBAAMD,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP,OAAO,CAACW,eAAhB;AAAiCD,YAAAA,OAAO,EAAPA;AAAjC,WAAD,CAAT;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUjB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,GAAG,CAAC,CACRJ,SAAS,CAACM,OAAO,CAACY,WAAT,EAAsBpB,eAAtB,CADD,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,CAACC,UAAD,CAAf","sourcesContent":["import { takeEvery, call, put, cancel, all } from \"redux-saga/effects\";\r\nimport API from \"../api\";\r\nimport * as actions from \"../actions\";\r\n\r\n/*\r\n  1. The weather service requires us to make a search by lat/lng to find its\r\n  weather ID.\r\n  2. We then use that weather ID to get the weather.\r\n\r\n  This process is pretty well defined here with a saga.\r\n\r\n  call invokes a method\r\n  put dispatches an action\r\n  takeEvery watches actions and executes a function\r\n\r\n  Also -- the `*` in function is important; turns it into a \"generator\"\r\n\r\n*/\r\n\r\nfunction* watchGetWeather(action) {\r\n  const { error, data } = yield call(\r\n    API.getWeatherData\r\n  );\r\n  if (error) {\r\n    console.log({ error });\r\n    yield put({ type: actions.API_ERROR, code: error.code });\r\n    yield cancel();\r\n    return;\r\n  }\r\n  const metrics = data || false;\r\n  if (!metrics) {\r\n    yield put({ type: actions.API_ERROR });\r\n    yield cancel();\r\n    return;\r\n  }\r\n  yield put({ type: actions.GET_METRIC_DATA, metrics });\r\n}\r\n\r\n\r\nfunction* AppLoading() {\r\n  yield all([\r\n    takeEvery(actions.GET_WEATHER, watchGetWeather),\r\n  ]);\r\n}\r\n\r\nexport default [AppLoading];\r\n"]},"metadata":{},"sourceType":"module"}